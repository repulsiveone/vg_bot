import time
import re
from aiogram import Bot
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from collections import defaultdict

from core.logger import logger
from core.keyboards import get_confirmation_kb

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class BroadcastStates(StatesGroup):
    waiting_for_content = State()
    waiting_for_confirmation = State()

# –§—É–Ω–∫—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
def extract_buttons_from_text(text: str):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ [–¢–µ–∫—Å—Ç](URL)."""
    buttons = re.findall(r'\[([^\]]+)\]\(([^\)]+)\)', text)
    clean_text = re.sub(r'\[([^\]]+)\]\(([^\)]+)\)', '', text)
    return buttons, clean_text.strip()

def build_inline_kb(buttons_data):
    """–°–æ–∑–¥–∞–µ—Ç inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–∑ —Å–ø–∏—Å–∫–∞ –∫–Ω–æ–ø–æ–∫."""
    builder = InlineKeyboardBuilder()
    if buttons_data and isinstance(buttons_data, list):
        for btn in buttons_data:
            if len(btn) == 2:
                text, url = btn
                if url.startswith(('http://', 'https://')):
                    builder.button(text=text, url=url)
                else:
                    builder.button(text=text, callback_data=url)
    return builder.as_markup()

async def safe_edit_message(message: CallbackQuery, text: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –æ—Ç–≤–µ—Ç–∞ –ø–æ—Å–ª–µ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞—Å—Å—ã–ª–∫–∏."""
    try:
        await message.message.edit_text(text)
    except:
        try:
            await message.message.edit_caption(caption=text)
        except:
            await message.answer(text, show_alert=True)

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–∞—Å—Å–ª—ã–∫–∞–º–∏

async def send_media_with_caption(bot: Bot, chat_id: int, data: dict):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–¥–∏–∞ —Å –ø–æ–¥–ø–∏—Å—å—é –∏ –∫–Ω–æ–ø–∫–∞–º–∏."""
    caption = data.get('caption', '')
    buttons = data.get('buttons', [])
    
    try:
        if data['content_type'] == "photo":
            await bot.send_photo(
                chat_id=chat_id,
                photo=data['file_id'],
                caption=caption,
                reply_markup=build_inline_kb(buttons),
                parse_mode="HTML"
            )
        elif data['content_type'] == "video":
            await bot.send_video(
                chat_id=chat_id,
                video=data['file_id'],
                caption=caption,
                reply_markup=build_inline_kb(buttons),
                parse_mode="HTML"
            )
        elif data['content_type'] == "animation":
            await bot.send_animation(
                chat_id=chat_id,
                animation=data['file_id'],
                caption=caption,
                reply_markup=build_inline_kb(buttons),
                parse_mode="HTML"
            )
    except Exception as e:
        logger.error(f"Error sending media to {chat_id}: {str(e)}")
        raise

async def ask_confirmation(message: Message, state: FSMContext):
    """
        –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏.
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (text –∏–ª–∏ media) –∏ –≤—ã–∑—ã–≤–∞–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –º–µ—Ç–æ–¥ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞.
    """
    data = await state.get_data()
    
    if data['content_type'] == "text":
        preview_text = data['text'][:500] + ("" if len(data['text']) <= 500 else "...")
        await message.answer(
            f"üìã <b>–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å—Å—ã–ª–∫–∏:</b>\n\n{preview_text}\n\n"
            f"üî≤ –ö–Ω–æ–ø–æ–∫: {len(data.get('buttons', []))}\n\n"
            "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_confirmation_kb(),
            parse_mode="HTML"
        )
    else:
        await send_media_preview(message, data)
    
    await state.set_state(BroadcastStates.waiting_for_confirmation)

async def send_media_preview(message: Message, media_data: dict):
    """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ (—Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, GIF).
        –î–æ–±–∞–≤–ª—è–µ—Ç –∫ –º–µ–¥–∏–∞ –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.
    """
    try:
        preview_text = (
            f"\n\nüìã <b>–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å—Å—ã–ª–∫–∏</b>\n"
            f"üî≤ –ö–Ω–æ–ø–æ–∫: {len(media_data.get('buttons', []))}\n"
            "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )
        
        if media_data['content_type'] == 'photo':
            await message.answer_photo(
                photo=media_data['file_id'],
                caption=f"{media_data.get('caption', '')}{preview_text}",
                reply_markup=get_confirmation_kb(),
                parse_mode="HTML"
            )
        elif media_data['content_type'] == 'video':
            await message.answer_video(
                video=media_data['file_id'],
                caption=f"{media_data.get('caption', '')}{preview_text}",
                reply_markup=get_confirmation_kb(),
                parse_mode="HTML"
            )
        elif media_data['content_type'] == 'animation':
            await message.answer_animation(
                animation=media_data['file_id'],
                caption=f"{media_data.get('caption', '')}{preview_text}",
                reply_markup=get_confirmation_kb(),
                parse_mode="HTML"
            )
    except Exception as e:
        logger.error(f"Preview error: {str(e)}")
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            parse_mode="HTML"
        )

async def execute_broadcast(bot: Bot, data: dict, users: list, callback: CallbackQuery = None):
    """–û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏ (–Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–π –∏–ª–∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π)."""
    if callback:
        await safe_edit_message(message=callback, text="‚è≥ –†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞—Ç–∞...")
    
    success = 0
    errors = 0
    successful_users = []
    start_time = time.perf_counter()
    for user in users:
        try:
            if data['content_type'] == "text":
                await bot.send_message(
                    chat_id=user.id,
                    text=data['text'],
                    reply_markup=build_inline_kb(data.get('buttons', [])),
                    parse_mode="HTML"
                )
            else:
                await send_media_with_caption(
                    bot=bot,
                    chat_id=user.id,
                    data=data
                )
            successful_users.append(user.id)
            success += 1
        except Exception as e:
            errors += 1
            logger.error(f"Error sending to {user.id}: {str(e)}")
    end_time = time.perf_counter()
    result_text = f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {success}\n‚ùå –û—à–∏–±–æ–∫: {errors}\n‚è∞ –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {end_time - start_time} —Å–µ–∫."
    
    if callback:
        await safe_edit_message(message=callback, text=result_text)
    
    return success, errors, successful_users

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞
async def parse_users_for_admin(user_repo):
    result = defaultdict(int)
    all_users = await user_repo.get_users()
    result['total'] = len(all_users)
    for user in all_users:
        result[user.role.value] += 1
    return result

async def parse_pending_brodcasts_for_admin(broadcast_repo):
    result = {}
    all_pending_broadcasts = await broadcast_repo.get_pending_broadcasts()
    for br in all_pending_broadcasts:
        result[br.id] = [br.created_by, br.scheduled_time]
    return result