from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from datetime import datetime, timedelta

from ..database import UserRepository, BroadcastRepository
from ..services import extract_buttons_from_text, ask_confirmation, safe_edit_message, execute_broadcast
from core.keyboards import get_schedule_keyboard
from core.filters import IsModeratorFilter
from core.scheduler import save_and_schedule_broadcast
from core.logger import logger
from core.db import async_session


router = Router()
user_repo = UserRepository()
broadcast_repo = BroadcastRepository()

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class BroadcastStates(StatesGroup):
    waiting_for_content = State()
    waiting_for_confirmation = State()
    waiting_for_schedule_time = State()
    waiting_for_custom_time = State()

@router.message(Command("broadcast"), IsModeratorFilter())
async def start_broadcast(message: Message, state: FSMContext):
    await message.answer(
        "üì¢ <b>–°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏. –§–æ—Ä–º–∞—Ç—ã:\n"
        "- <b>–ñ–∏—Ä–Ω—ã–π</b>, <i>–∫—É—Ä—Å–∏–≤</i>, <code>–∫–æ–¥</code>\n"
        "- –°—Å—ã–ª–∫–∏: [—Ç–µ–∫—Å—Ç](https://example.com)\n"
        "- –ö–Ω–æ–ø–∫–∏: –¥–æ–±–∞–≤—å—Ç–µ –≤ –∫–æ–Ω—Ü–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n\n"
        "–ü—Ä–∏–º–µ—Ä:\n"
        "<i>–ü—Ä–∏–≤–µ—Ç!</i> –≠—Ç–æ [—Å—Å—ã–ª–∫–∞](https://example.com)\n"
        "---\n"
        "–ö–Ω–æ–ø–∫–∞1 | https://site1.com\n"
        "–ö–Ω–æ–ø–∫–∞2 | callback:action1",
        parse_mode="HTML"
    )
    await state.set_state(BroadcastStates.waiting_for_content)

@router.message(BroadcastStates.waiting_for_content, F.content_type == "text")
async def process_text_broadcast(message: Message, state: FSMContext):
    """–ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏–∑–≤–ª–µ–∫–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏."""
    parts = message.text.split('\n---\n')
    text_part = parts[0]
    
    buttons_in_text, clean_text = extract_buttons_from_text(text_part)
    
    additional_buttons = []
    if len(parts) > 1:
        for line in parts[1].split('\n'):
            if ' | ' in line:
                btn_text, btn_action = line.split(' | ', 1)
                additional_buttons.append((btn_text.strip(), btn_action.strip()))
    
    all_buttons = buttons_in_text + additional_buttons
    
    await state.update_data(
        content_type="text",
        text=clean_text,
        buttons=all_buttons
    )
    await ask_confirmation(message, state)

@router.message(BroadcastStates.waiting_for_content, F.content_type.in_({'photo', 'video', 'animation'}))
async def process_media_broadcast(message: Message, state: FSMContext):
    """–ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ/GIF, –∏–∑–≤–ª–µ–∫–∞–µ—Ç –ø–æ–¥–ø–∏—Å—å –∏ –∫–Ω–æ–ø–∫–∏, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏."""
    if message.photo:
        file_id = message.photo[-1].file_id
    elif message.video:
        file_id = message.video.file_id
    else:
        file_id = message.animation.file_id
    
    caption = message.caption or ""
    buttons_in_caption, clean_caption = extract_buttons_from_text(caption)
    
    additional_buttons = []
    if '---' in caption:
        caption_parts = caption.split('---')
        clean_caption = caption_parts[0]
        if len(caption_parts) > 1:
            for line in caption_parts[1].split('\n'):
                if ' | ' in line:
                    btn_text, btn_action = line.split(' | ', 1)
                    additional_buttons.append((btn_text.strip(), btn_action.strip()))
    
    all_buttons = buttons_in_caption + additional_buttons
    
    await state.update_data(
        content_type=message.content_type,
        file_id=file_id,
        caption=clean_caption,
        buttons=all_buttons
    )
    await ask_confirmation(message, state)

@router.callback_query(BroadcastStates.waiting_for_confirmation, F.data == "broadcast_confirm")
async def confirm_broadcast(callback: CallbackQuery, state: FSMContext, bot: Bot, session):
    data = await state.get_data()
    users = await user_repo.get_users(session)
    logger.info(f"INFO: {data, data['content_type']}")

    await execute_broadcast(bot, data, users, callback)
    await state.clear()

@router.callback_query(BroadcastStates.waiting_for_confirmation, F.data == "broadcast_schedule")
async def show_schedule_options(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏."""
    await callback.message.answer(
        "‚è∞ –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏:",
        reply_markup=get_schedule_keyboard()
    )
    await state.set_state(BroadcastStates.waiting_for_schedule_time)
    await callback.answer()

@router.callback_query(BroadcastStates.waiting_for_schedule_time, F.data.startswith("schedule_"))
async def handle_schedule_selection(callback: CallbackQuery, state: FSMContext, session):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏."""
    action = callback.data.split("_")[1]
    
    if action == "cancel":
        await callback.message.edit_text("‚ùå –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
        await state.clear()
        return
    
    data = await state.get_data()
    now = datetime.now()
    
    if action == "1h":
        scheduled_time = now + timedelta(hours=1)
    elif action == "3h":
        scheduled_time = now + timedelta(hours=3)
    elif action == "tomorrow":
        scheduled_time = now + timedelta(days=1)
    elif action == "custom":
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ DD.MM.YYYY HH:MM")
        await state.set_state(BroadcastStates.waiting_for_custom_time)
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –ø–ª–∞–Ω–∏—Ä—É–µ–º —Ä–∞—Å—Å—ã–ª–∫—É
    broadcast = await save_and_schedule_broadcast(
        data, 
        scheduled_time, 
        callback.from_user.id,
        session
    )
    
    await callback.message.edit_text(
        f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ {scheduled_time.strftime('%d.%m.%Y %H:%M')}\n"
        f"ID: {broadcast.id}"
    )
    await state.clear()
    await callback.answer()

@router.message(BroadcastStates.waiting_for_custom_time, F.text.regexp(r'\d{2}\.\d{2}\.\d{4} \d{2}:\d{2}'))
async def handle_custom_time(message: Message, state: FSMContext, session):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä—É—á–Ω–æ–π –≤–≤–æ–¥ –≤—Ä–µ–º–µ–Ω–∏."""
    try:
        scheduled_time = datetime.strptime(message.text, "%d.%m.%Y %H:%M")
        if scheduled_time < datetime.now():
            await message.answer("‚ùå –£–∫–∞–∑–∞–Ω–æ –ø—Ä–æ—à–µ–¥—à–µ–µ –≤—Ä–µ–º—è. –í–≤–µ–¥–∏—Ç–µ –±—É–¥—É—â—É—é –¥–∞—Ç—É:")
            return
            
        data = await state.get_data()
        broadcast = await save_and_schedule_broadcast(
            data, 
            scheduled_time, 
            message.from_user.id,
            session,
        )
        
        await message.answer(
            f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ {scheduled_time.strftime('%d.%m.%Y %H:%M')}\n"
            f"ID: {broadcast.id}"
        )
        await state.clear()
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ DD.MM.YYYY HH:MM")

@router.callback_query(BroadcastStates.waiting_for_confirmation, F.data == "broadcast_edit")
async def edit_broadcast(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    
    if data['content_type'] == "text":
        await callback.message.answer(
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:",
            parse_mode="HTML"
        )
    else:
        await callback.message.answer(
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –º–µ–¥–∏–∞-—Ñ–∞–π–ª —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –ø–æ–¥–ø–∏—Å—å—é:",
            parse_mode="HTML"
        )
    
    await state.set_state(BroadcastStates.waiting_for_content)
    await callback.answer()

@router.callback_query(BroadcastStates.waiting_for_confirmation, F.data == "broadcast_cancel")
async def cancel_broadcast(callback: CallbackQuery, state: FSMContext):
    await safe_edit_message(message=callback, text="‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
    
    await state.clear()
    await callback.answer()